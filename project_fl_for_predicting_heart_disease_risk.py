# -*- coding: utf-8 -*-
"""Project: FL for Predicting Heart Disease Risk

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZPabX2tctuyH_PcDGTBMLz9zRtYmbzmU

# **Federated Learning for Predicting Heart Disease Risk**

Develop a federated learning system where multiple hospitals or clinics train a shared model to predict heart disease risk based on patient data (e.g., age, cholesterol levels, blood pressure) without sharing their sensitive patient data. The Flower framework will be used to handle federated learning orchestration.

## **1. Install Dependencies**
"""

!pip install flwr scikit-learn pandas tensorflow

"""## **2. Load and Prepare Data**"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load UCI Heart Disease dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
columns = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang',
           'oldpeak', 'slope', 'ca', 'thal', 'target']

data = pd.read_csv(url, names=columns, na_values="?")
data.dropna(inplace=True)

# Split into features and labels
X = data.drop("target", axis=1)
y = data["target"]

# Normalize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split data to simulate clients
client_datasets = []
for i in range(3):  # Simulate 3 clinics
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    client_datasets.append((X_train, y_train, X_test, y_test))

"""## **3. Define Model**"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

def create_model():
    model = Sequential([
        Dense(16, activation="relu", input_shape=(13,)),
        Dense(8, activation="relu"),
        Dense(1, activation="sigmoid")
    ])
    model.compile(optimizer="adam",
                  loss="binary_crossentropy",
                  metrics=["accuracy"])
    return model

"""## **4. Implement Flower Client**

"""

import flwr as fl

class HeartDiseaseClient(fl.client.NumPyClient):
    def __init__(self, model, train_data, test_data):
        self.model = model
        self.x_train, self.y_train = train_data
        self.x_test, self.y_test = test_data

    def get_parameters(self):
        return self.model.get_weights()

    def fit(self, parameters, config):
        self.model.set_weights(parameters)
        self.model.fit(self.x_train, self.y_train, epochs=1, batch_size=32)
        return self.model.get_weights(), len(self.x_train), {}

    def evaluate(self, parameters, config):
        self.model.set_weights(parameters)
        loss, accuracy = self.model.evaluate(self.x_test, self.y_test)
        return loss, len(self.x_test), {"accuracy": accuracy}

"""## **5. Start Federated Clients**"""

import flwr as fl
import time
import os

# Start Flower server in the background, ensuring it runs in the foreground
# and redirects stdout/stderr to a file for debugging
os.system("flwr server start --port 8080  > flower_server.log 2>&1 &")

# Wait for a longer period to allow the server to start
time.sleep(10)

# Simulate clients
clients = []
for X_train, y_train, X_test, y_test in client_datasets:
    client = HeartDiseaseClient(create_model(), (X_train, y_train), (X_test, y_test))
    try:
        fl.client.start_numpy_client(server_address="localhost:8080", client=client)
    except Exception as e:
        print(f"Error starting client: {e}")
        # Prints any errors encountered during client startup for diagnosis

"""## **6. Implement Flower Server**"""

# ipython-input-10 (modified)
import flwr as fl

def start_server(): # Only define the function. No need to call here.
    fl.server.start_server(
        server_address="localhost:8080",
        config={"num_rounds": 5}
    )

"""
This project demonstrates how federated learning can enable privacy-preserving collaboration across clinics to predict heart disease risk, using the Flower framework for decentralized training without sharing sensitive data."""